"""add triggers to book_reader

Revision ID: fd394ec2d8ae
Revises: 00fbaa7ebb3b
Create Date: 2024-12-18 22:25:05.933934

"""
from typing import Sequence, Union

from alembic import op
from src.project.core.config import settings
import sqlalchemy as sa

# revision identifiers, used by Alembic.
revision: str = 'fd394ec2d8ae'
down_revision: Union[str, None] = '00fbaa7ebb3b'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.execute(f"""
        CREATE OR REPLACE FUNCTION update_instance_status()
        RETURNS TRIGGER AS $update_instance_status$
        BEGIN
            IF TG_OP = 'INSERT' THEN
                -- При вставке меняем статус для NEW.id_instance
                UPDATE {settings.POSTGRES_SCHEMA}.book_instance
                SET taken_now = TRUE
                WHERE id_instance = NEW.id_instance;
            ELSIF TG_OP = 'DELETE' THEN
                -- При удалении меняем статус для OLD.id_instance
                UPDATE {settings.POSTGRES_SCHEMA}.book_instance
                SET taken_now = FALSE
                WHERE id_instance = OLD.id_instance;
            END IF;
            RETURN NULL;
        END;
        $update_instance_status$ LANGUAGE plpgsql;
    """)

    op.execute(f"""
        CREATE OR REPLACE TRIGGER after_book_reader_insert_delete
        AFTER INSERT OR DELETE ON {settings.POSTGRES_SCHEMA}.book_reader
        FOR EACH ROW
        EXECUTE FUNCTION update_instance_status();
    """)

    op.execute(f"""
        -- BEFORE INSERT
        -- Проверка, что читатель берёт книгу, которую ещё никто не взял
        CREATE OR REPLACE FUNCTION check_instance_status()
        RETURNS TRIGGER AS $check_instance_status$
        BEGIN
            IF EXISTS (
                SELECT 1
                FROM {settings.POSTGRES_SCHEMA}.book_instance
                WHERE id_instance = NEW.id_instance
                      AND taken_now = TRUE
            ) 
            THEN
                RAISE EXCEPTION 'Этот экземпляр книги был взят другим читателем!';
            END IF;
        
            RETURN NEW;
        END;
        $check_instance_status$ LANGUAGE plpgsql;""")

    op.execute(f"""
        -- AFTER DELETE
        CREATE OR REPLACE TRIGGER before_book_reader_insert
        BEFORE INSERT ON {settings.POSTGRES_SCHEMA}.book_reader
        FOR EACH ROW
        EXECUTE FUNCTION check_instance_status();
    """)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.execute(f"""
        DROP TRIGGER  after_book_reader_insert_delete;
        DROP FUNCTION update_instance_status;
    """)
    op.execute(f"""
        DROP TRIGGER before_book_reader_insert;
        DROP FUNCTION check_instance_status;
    """)
    # ### end Alembic commands ###
